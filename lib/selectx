import 'dart:async';
import 'dart:convert';

import 'package:dio/dio.dart';
import 'package:flutter/material.dart';

/// Flutter code sample for [Autocomplete] that demonstrates fetching the
/// options asynchronously and debouncing the network calls.

// const Duration fakeAPIDuration = Duration(seconds: 1);
const Duration debounceDuration = Duration(milliseconds: 500);

void main() => runApp(AutocompleteExampleApp());

class AutocompleteExampleApp extends StatelessWidget {
 // const AutocompleteExampleApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: const Text('Autocomplete - async and debouncing'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              const _AsyncAutocomplete(),
            ],
          ),
        ),
      ),
    );
  }
}

class _AsyncAutocomplete extends StatefulWidget {
  const _AsyncAutocomplete();

  @override
  State<_AsyncAutocomplete> createState() => _AsyncAutocompleteState();
}

class _AsyncAutocompleteState extends State<_AsyncAutocomplete> {
  String? _currentQuery;
  late Iterable<String> _lastOptions = <String>[];
  late final _Debounceable<Iterable<String>?, String> _debouncedSearch;

  Future<Iterable<String>?> _search(String query) async {
    _currentQuery = query;
    final Iterable<String> options = await _FakeAPI.search(_currentQuery!);
    if (_currentQuery != query) {
      return null;
    }
    _currentQuery = null;
    return options;
  }

  @override
  void initState() {
    super.initState();
    _debouncedSearch = _debounce<Iterable<String>?, String>(_search);
  }

  @override
  Widget build(BuildContext context) {
    return Autocomplete<String>(
      optionsBuilder: (TextEditingValue textEditingValue) async {
        final Iterable<String>? options =
        await _debouncedSearch(textEditingValue.text);
        if (options == null) {
          return _lastOptions;
        }
        _lastOptions = options;
        return options;
      },
      onSelected: (String selection) {
        debugPrint('You just selected $selection');
      },
      fieldViewBuilder: (BuildContext context,
          TextEditingController textEditingController,
          FocusNode focusNode, VoidCallback onFieldSubmitted){
        return TextFormField(
          controller: textEditingController,
          decoration: InputDecoration(
            filled: true,
            fillColor: Colors.grey,
            border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(50),
                borderSide: BorderSide.none
            ),
            hintText: 'Comment...',
            hintStyle: TextStyle(
              color:Colors.black.withOpacity(0.3),
            ),
          ),
        );
      },
    );
  }
}

class _FakeAPI {
  static Dio dio = Dio();
  static List<String> _kOptions = <String>[];
  static Future<Iterable<String>> search(String query) async {
    await dio.get('https://api.getaddress.io/autocomplete/${query}?api-key=Ue_3H7nDskC8He5pv8VryQ41097').then((value){
      _kOptions.clear();
      (jsonDecode(value.toString())['suggestions'] as Iterable).forEach((element) {
        _kOptions.add(element['address']);
      });
    }).catchError((onError){
      return const Iterable<String>.empty();
    });
    return _kOptions;
  }
}

typedef _Debounceable<S, T> = Future<S?> Function(T parameter);

_Debounceable<S, T> _debounce<S, T>(_Debounceable<S?, T> function) {
  _DebounceTimer? debounceTimer;
  return (T parameter) async {
    if (debounceTimer != null && !debounceTimer!.isCompleted) {
      debounceTimer!.cancel();
    }
    debounceTimer = _DebounceTimer();
    try {
      await debounceTimer!.future;
    } catch (error) {
      if (error is _CancelException) {
        return null;
      }
      rethrow;
    }
    return function(parameter);
  };
}

class _DebounceTimer {
  _DebounceTimer() {
    _timer = Timer(debounceDuration, _onComplete);
  }
  late final Timer _timer;
  final Completer<void> _completer = Completer<void>();
  void _onComplete() {
    _completer.complete();
  }
  Future<void> get future => _completer.future;
  bool get isCompleted => _completer.isCompleted;
  void cancel() {
    _timer.cancel();
    _completer.completeError(const _CancelException());
  }
}

class _CancelException implements Exception {
  const _CancelException();
}
